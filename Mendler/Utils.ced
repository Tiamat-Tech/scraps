module Utils.

data DPair (A: ★) (B: A ➔ ★) : ★ =
| dpair : Π a: A. B a ➔ DPair.

Pair : ★ ➔ ★ ➔ ★
= λ A: ★. λ B: ★. DPair ·A ·(λ _: A. B).

fst : ∀ A: ★. ∀ B: A ➔ ★. DPair ·A ·B ➔ A
= Λ A. Λ B. λ p. σ p { dpair a b ➔ a }.

snd : ∀ A: ★. ∀ B: A ➔ ★. Π p: DPair ·A ·B. B (fst p)
= Λ A. Λ B. λ p. σ p { dpair a b ➔ b }.

Id : ★ ➔ ★ ➔ ★
= λ X: ★. λ Y: ★. ι f: X ➔ Y. {f ≃ λ x. x}.

intrId : ∀ X: ★. ∀ Y: ★. ∀ f: X ➔ Y. (Π x: X. {f x ≃ x}) ➾ Id ·X ·Y
= Λ X. Λ Y. Λ f. Λ p. [λ x. φ (p x) - (f x) {|x|}, β].

elimId : ∀ X: ★. ∀ Y: ★. Id ·X ·Y ➾ X ➔ Y
= Λ X. Λ Y. Λ c. λ x. φ (ρ c.2 - β) - (c.1 x) {|x|}.

reflId : ∀ X: ★. Id ·X ·X
= Λ X. intrId -(λ x. x) -(λ x. β).

transId : ∀ X: ★. ∀ Y: ★. ∀ Z: ★. Id ·X ·Y ➾ Id ·Y ·Z ➾ Id ·X ·Z
= Λ X. Λ Y. Λ Z. Λ xy. Λ yz. intrId -(λ x. elimId -yz (elimId -xy x)) -(λ x. β).

irrelId : ∀ X: ★. ∀ Y: ★. Id ·X ·Y ➾ Id ·X ·Y
= Λ X. Λ Y. Λ id. intrId -(elimId -id) -(λ x. β).

Mono : (★ ➔ ★) ➔ ★
= λ F: ★ ➔ ★. ∀ X: ★. ∀ Y: ★. Id ·X ·Y ➾ Id ·(F ·X) ·(F ·Y).

Eq : ★ ➔ ★ ➔ ★
= λ X: ★. λ Y: ★. ι _: Id ·X ·Y. Id ·Y ·X.

intrEq : ∀ X: ★. ∀ Y: ★. Id ·X ·Y ➾ Id ·Y ·X ➾ Eq ·X ·Y
= Λ X. Λ Y. Λ xy. Λ yx.
[intrId -(elimId -xy) -(λ x. β),
 intrId -(elimId -yx) -(λ x. β)].

elimEqL : ∀ X: ★. ∀ Y: ★. Eq ·X ·Y ➾ X ➔ Y
= Λ X. Λ Y. Λ eq. elimId -eq.1.

elimEqR : ∀ X: ★. ∀ Y: ★. Eq ·X ·Y ➾ Y ➔ X
= Λ X. Λ Y. Λ eq. elimId -eq.2.

reflEq : ∀ X: ★. Eq ·X ·X
= Λ X. intrEq -(reflId ·X) -(reflId ·X).

symEq : ∀ X: ★. ∀ Y: ★. Eq ·X ·Y ➾ Eq ·Y ·X
= Λ X. Λ Y. Λ eq. intrEq -eq.2 -eq.1.

transEq : ∀ X: ★. ∀ Y: ★. ∀ Z: ★. Eq ·X ·Y ➾ Eq ·Y ·Z ➾ Eq ·X ·Z
= Λ X. Λ Y. Λ Z. Λ xy. Λ yz. intrEq -(transId -xy.1 -yz.1) -(transId -yz.2 -xy.2).

irrelEq : ∀ X: ★. ∀ Y: ★. Eq ·X ·Y ➾ Eq ·X ·Y
= Λ X. Λ Y. Λ eq. intrEq -(intrId -(elimEqL -eq) -(λ x. β))
                         -(intrId -(elimEqR -eq) -(λ y. β)).
