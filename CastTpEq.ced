module cast-tpeq.

{- A Cast is an identity function between types, used in the papers
   [1] Efficient Mendler-Style Lambda Encodings in Cedille
   [2] Course-of-Value Induction in Cedille
   then renamed to Id in the papers
   [3] Efficient Lambda Encodings for Mendler-Style Coinductive Types in Cedille
   [4] Simulating Large Eliminations in Cedille
   with the CoVI and Coinductives papers casting type families. -}

Cast : Π I: ★. (I ➔ ★) ➔ (I ➔ ★) ➔ ★
= λ I: ★. λ S: I ➔ ★. λ T: I ➔ ★. ι f: ∀ i: I. S i ➔ T i. {f ≃ Λ i. λ x. x}.

introCast : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ f: ∀ i: I. S i ➔ T i.
            ∀ p: (∀ i: I. Π x: S i. {f x ≃ x}). Cast ·I ·S ·T
= Λ I. Λ S. Λ T. Λ f. Λ p. [Λ i. λ x. φ (p -i x) - (f -i x) {|x|}, β].

elimCast : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ c: Cast ·I ·S ·T. ∀ i: I. S i ➔ T i
= Λ I. Λ S. Λ T. Λ c. Λ i. λ x. φ (ρ c.2 - β) - (c.1 -i x) {|x|}.

castRefl : ∀ I: ★. ∀ S: I ➔ ★. Cast ·I ·S ·S
= Λ I. Λ S. introCast -(Λ i. λ x. x) -(Λ i. λ x. β).

castTrans : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ U: I ➔ ★.
            ∀ cst: Cast ·I ·S ·T. ∀ ctu: Cast ·I ·T ·U. Cast ·I ·S ·U
= Λ I. Λ S. Λ T. Λ U. Λ cst. Λ ctu.
introCast -(Λ i. λ x. elimCast -ctu -i (elimCast -cst -i x))
          -(Λ i. λ x. β).

introCastId : {introCast ≃ λ x. x} = β.
elimCastId  : {elimCast  ≃ λ x. x} = β.
castReflId  : {castRefl  ≃ λ x. x} = β.
castTransId : {castTrans ≃ λ x. x} = β.

{- A "type equality" is a Cast in both directions,
   satisfying the properties of an equivalence relation,
   but not truly an equality since it has no substitutive principle;
   originally introduced in the Large Eliminations paper. -}

TpEq : Π I: ★. (I ➔ ★) ➔ (I ➔ ★) ➔ ★
= λ I: ★. λ S: I ➔ ★. λ T: I ➔ ★. ι _: Cast ·I ·S ·T. Cast ·I ·T ·S.

introTpEq : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★.
            ∀ cst: Cast ·I ·S ·T. ∀ cts: Cast ·I ·T ·S. TpEq ·I ·S ·T
= Λ I. Λ S. Λ T. Λ cst. Λ cts.
[introCast -(elimCast -cst) -(Λ i. λ x. β),
 introCast -(elimCast -cts) -(Λ i. λ x. β)].

elimTpEqL : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ tpeq: TpEq ·I ·S ·T. ∀ i: I. S i ➔ T i
= Λ I. Λ S. Λ T. Λ tpeq. elimCast -tpeq.1.

elimTpEqR : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ tpeq: TpEq ·I ·S ·T. ∀ i: I. T i ➔ S i
= Λ I. Λ S. Λ T. Λ tpeq. elimCast -tpeq.2.

tpEqRefl : ∀ I: ★. ∀ S: I ➔ ★. TpEq ·I ·S ·S
= Λ I. Λ S. introTpEq -(castRefl ·I ·S) -(castRefl ·I ·S).

tpEqSym : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ tpeq: TpEq ·I ·S ·T. TpEq ·I ·T ·S
= Λ I. Λ S. Λ T. Λ tpeq. introTpEq -tpeq.2 -tpeq.1.

tpEqTrans : ∀ I: ★. ∀ S: I ➔ ★. ∀ T: I ➔ ★. ∀ U: I ➔ ★.
            ∀ tpeqst: TpEq ·I ·S ·T. ∀ tpeqtu: TpEq ·I ·T ·U. TpEq ·I ·S ·U
= Λ I. Λ S. Λ T. Λ U. Λ tpeqst. Λ tpeqtu.
introTpEq -(castTrans -tpeqst.1 -tpeqtu.1) -(castTrans -tpeqtu.2 -tpeqst.2).

introTpEqId : {introTpEq ≃ λ x. x} = β.
elimTpEqLId : {elimTpEqL ≃ λ x. x} = β.
elimTpEqRId : {elimTpEqR ≃ λ x. x} = β.
tpEqReflId  : {tpEqRefl  ≃ λ x. x} = β.
tpEqSymId   : {tpEqSym   ≃ λ x. x} = β.
tpEqTransId : {tpEqTrans ≃ λ x. x} = β.

{- References
   [1] https://arxiv.org/abs/1803.02473
   [2] https://arxiv.org/abs/1811.11961
   [3] https://arxiv.org/abs/2005.00199
   [4] https://arxiv.org/abs/2112.07817
   Other
   * Elaborating Inductive Definitions and Course-of-Values Induction In Cedille
     https://arxiv.org/abs/1903.08233
   * Monotone Recursive Types and Recursive Data Representations in Cedille
     https://arxiv.org/abs/2001.02828 -}
